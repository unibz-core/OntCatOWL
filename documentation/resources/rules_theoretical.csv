Code;First-Order Logic Rule;Markdown Rule
R01;subClassOf(x,x);$subClassOf(x,x)$
R02;subClassOf(x,y) ^ subClassOf(y,z) -> subClassOf(x,z);$subClassOf(x,y) \land subClassOf(y,z) \rightarrow subClassOf(x,z)$
R03;EndurantType(x) <-> RigidType(x) xor NonRigidType(x);$EndurantType(x) \leftrightarrow RigidType(x) \oplus NonRigidType(x)$
R04;NonRigidType(x) <-> AntiRigidType(x) xor SemiRigidType(x);$NonRigidType(x) \leftrightarrow AntiRigidType(x) \oplus SemiRigidType(x)$
R05;EndurantType(x) <-> Sortal(x) xor NonSortal(x);$EndurantType(x) \leftrightarrow Sortal(x) \oplus NonSortal(x)$
R06;Kind(x) -> RigidType(x) ^ Sortal(x);$Kind(x) \rightarrow RigidType(x) \land Sortal(x)$
R07;SubKind(x) -> RigidType(x) ^ Sortal(x);$SubKind(x) \rightarrow RigidType(x) \land Sortal(x)$
R08;~E x (Kind(x) ^ SubKind(x));$\nexists x (Kind(x) \land SubKind(x))$
R09;Role(x) -> AntiRigidType(x) ^ Sortal(x);$Role(x) \rightarrow AntiRigidType(x) \land Sortal(x)$
R10;Phase(x) -> AntiRigidType(x) ^ Sortal(x);$Phase(x) \rightarrow AntiRigidType(x) \land Sortal(x)$
R11;~E x (Phase(x) ^ Role(x));$\nexists x (Phase(x) \land Role(x))$
R12;Category(x) -> NonSortal(x) ^ RigidType(x);$Category(x) \rightarrow NonSortal(x) \land RigidType(x)$
R13;RoleMixin(x) -> NonSortal(x) ^ AntiRigidType(x);$RoleMixin(x) \rightarrow NonSortal(x) \land AntiRigidType(x)$
R14;PhaseMixin(x) -> NonSortal(x) ^ AntiRigidType(x);$PhaseMixin(x) \rightarrow NonSortal(x) \land AntiRigidType(x)$
R15;~E x (PhaseMixin(x) ^ RoleMixin(x));$\nexists x (PhaseMixin(x) \land RoleMixin(x))$
R16;Mixin(x) -> NonSortal(x) ^ SemiRigidType(x);$Mixin(x) \rightarrow NonSortal(x) \land SemiRigidType(x)$
R17;RigidType(x) -> Category(x) v Kind(x) v SubKind(x);$RigidType(x) \rightarrow Category(x) \lor Kind(x) \lor SubKind(x)$
R18;AntiRigidType(x) -> Role(x) v Phase(x) v RoleMixin(x) v PhaseMixin(x);$AntiRigidType(x) \rightarrow Role(x) \lor Phase(x) \lor RoleMixin(x) \lor PhaseMixin(x)$
R19;SemiRigidType(x) -> Mixin(x);$SemiRigidType(x) \rightarrow Mixin(x)$
R20;Sortal(x) -> Kind(x) v Phase(x) v Role(x) v SubKind(x);$Sortal(x) \rightarrow Kind(x) \lor Phase(x) \lor Role(x) \lor SubKind(x)$
R21;NonSortal(x) -> Category(x) v PhaseMixin(x) v RoleMixin(x) v Mixin(x);$NonSortal(x) \rightarrow Category(x) \lor PhaseMixin(x) \lor RoleMixin(x) \lor Mixin(x)$
R22;RigidType(x) ^ subClassOf(x,y) -> ~AntiRigidType(y);$RigidType(x) \land subClassOf(x,y) \rightarrow \neg AntiRigidType(y)$
R23;SemiRigidType(x) ^ subClassOf(x,y) -> ~AntiRigidType(y);$SemiRigidType(x) \land subClassOf(x,y) \rightarrow \neg AntiRigidType(y)$
R24;AntiRigidType(x) ^ Sortal(x) ^ Category(y) ^ subClassOf(x,y) -> E z (RigidType(z) ^ Sortal(z) ^ subClassOf(x,z) ^ subClassOf(z,y));$AntiRigidType(x) \land Sortal(x) \land Category(y) \land subClassOf(x,y) \rightarrow \exists z (RigidType(z) \land Sortal(z) \land subClassOf(x,z) \land subClassOf(z,y))$
R25;Mixin(x) -> E y,z (subClassOf(y,x) ^ RigidType(y) ^ subClassOf(z,x) ^ AntiRigidType(z));$Mixin(x) \rightarrow \exists y,z (subClassOf(y,x) \land RigidType(y) \land subClassOf(z,x) \land AntiRigidType(z))$
R26;x != y ^ Kind(x) ^ subClassOf(x,y) -> NonSortal(y);$x \neq y \land Kind(x) \land subClassOf(x,y) \rightarrow NonSortal(y)$
R27;NonSortal(x) ^ subClassOf(x,y) -> NonSortal(y);$NonSortal(x) \land subClassOf(x,y) \rightarrow NonSortal(y)$
R28;Sortal(x) -> E! y (subClassOf (x,y) ^ Kind(y));$Sortal(x) \rightarrow \exists! y (subClassOf (x,y) \land Kind(y))$
R29;shareKind(x,y) <-> E! z (Kind(z) ^ subClassOf(x,z) ^ subClassOf(y,z));$shareKind(x,y) \leftrightarrow \exists! z (Kind(z) \land subClassOf(x,z) \land subClassOf(y,z))$
R30;shareSuperClass(x,y) <-> E z (subClassOf(x,z) ^ subClassOf(y,z));$shareSuperClass(x,y) \leftrightarrow \exists z (subClassOf(x,z) \land subClassOf(y,z))$
R31;NonSortal(x) -> E y, z ( y != z ^ Sortal(y) ^ Sortal(z) ^ ~shareKind(y,z) ^ (subClassOf(y,x) v shareSuperClass(x,y)) ^ (subClassOf(z,x) v shareSuperClass(x,z)) );$NonSortal(x) \rightarrow \exists y, z ( y \neq z \land Sortal(y) \land Sortal(z) \land \neg shareKind(y,z) \land (subClassOf(y,x) \lor shareSuperClass(x,y)) \land (subClassOf(z,x) \lor shareSuperClass(x,z)) )$
R32;Phase(x) ^ subClassOf(x,y) -> ~Role(y) ^ ~RoleMixin(y);$Phase(x) \land subClassOf(x,y) \rightarrow \neg Role(y) \land \neg RoleMixin(y)$
R33;PhaseMixin(x) ^ subClassOf(x,y) -> ~RoleMixin(y);$PhaseMixin(x) \land subClassOf(x,y) \rightarrow \neg RoleMixin(y)$
R34;Role(x) ^ PhaseMixin(y) ^ subClassOf(x,y) -> E z (Phase(z) ^ subClassOf(x,z) ^ subClassOf(z,y));$Role(x) \land PhaseMixin(y) \land subClassOf(x,y) \rightarrow \exists z (Phase(z) \land subClassOf(x,z) \land subClassOf(z,y))$
R35;Phase(x) -> E y (Phase (y) ^ shareKind(x,y) ^ ~isSubClassOf(x,y) ^ ~isSubClassOf(y,x));$Phase(x) \rightarrow \exists y (Phase (y) \land shareKind(x,y) \land \neg isSubClassOf(x,y) \land \neg isSubClassOf(y,x))$
R36;PhaseMixin(x) -> E y (Category (y) ^ isSubClassOf(x,y));$PhaseMixin(x) \rightarrow \exists y (Category (y) \land isSubClassOf(x,y))$
R37;PhaseMixin(x) ^ Category(y) ^ subClassOf(x,y) -> E z (PhaseMixin(z) ^ ~isSubClassOf(x,z) ^ ~isSubClassOf(z,x) ^ isSubClassOf(z,y));$PhaseMixin(x) \land Category(y) \land subClassOf(x,y) \rightarrow \exists z (PhaseMixin(z) \land \neg isSubClassOf(x,z) \land \neg isSubClassOf(z,x) \land isSubClassOf(z,y))$
